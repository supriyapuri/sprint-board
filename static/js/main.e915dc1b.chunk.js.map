{"version":3,"sources":["setupFirebase.js","Components/Home.js","Components/AddTask.js","Components/Todo.js","Components/WorkInProgress.js","Components/Complete.js","Components/Board.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","Home","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","GoogleAuthProvider","this","firebaseAuth","React","Component","firestore","AddTask","state","showForm","todos","title","category","onEntryChange","e","console","log","value","target","setState","name","preventDefault","uid","currentUser","collection","doc","add","then","onSubmit","type","placeholder","onChange","required","href","rel","onClick","className","renderForm","Todo","onEditClick","todo","data","updatedTitle","prompt","updatedCategory","id","update","onDeleteClick","window","confirm","delete","orderBy","onSnapshot","snapshot","docs","todoItems","map","key","WorkInProgress","wips","wip","shouldDelete","wipItems","style","color","Complete","completedTasks","complete","completeItems","Board","isSignedIn","signOut","props","history","push","unregisterAuthObserver","onAuthStateChanged","user","displayName","border","width","textAlign","Nav","to","withRouter","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e915dc1b.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport 'firebase/firestore';\n\nfirebase.initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID\n});\n","import React from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\n\n\nexport default class Home extends React.Component {\n\n    uiConfig = {\n        signInFlow:'popup',\n        signInSuccessUrl:'/#/board',\n        signInOptions:[\n            firebase.auth.EmailAuthProvider.PROVIDER_ID,\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        ],\n    //     callbacks:{\n    //         signInSuccessWithAuthResult:()=>{\n    //             this.props.history.push('/board')\n    //         }\n    //     }\n    \n    }\n    \n\n\n    render() {\n        return (\n            <div>\n                <h1>Home</h1>\n                <p>sign in:</p>\n                <StyledFirebaseAuth\n                uiConfig={this.uiConfig}\n                firebaseAuth= {firebase.auth()}/>\n            </div>\n        )\n    }\n}\n\n\n\n","import React from 'react';\nimport firebase from 'firebase';\n\nconst firestore= firebase.firestore();\n\nexport default class AddTask extends React.Component{\n       state={\n            showForm: false,\n            todos: {\n                title :'',\n                category :''\n            }\n        }\n\n        onEntryChange= (e) => {\n            console.log(e)\n            \n            const value = e.target.value;\n            \n            this.setState({\n                todos:{\n                    ...this.state.todos,\n                [e.target.name] : value }\n            })\n    \n        }\n\n        AddTask= (e)=> {\n\n            e.preventDefault();\n            const uid = firebase.auth().currentUser.uid;\n\n            firestore.collection('users')\n            .doc(uid)\n            .collection('todos').add({\n                title: this.state.todos.title,\n                category: this.state.todos.category,\n\n            }).then(()=>{\n                this.setState({\n                    todos: {\n                        title: '',\n                        category: ''\n                    },\n                    showForm: false\n                })\n            })\n\n        }\n    \n\n        renderForm () {\n            return(\n                <div>\n                    <form onSubmit={this.AddTask}>\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <input type= \"text\" \n                                        name = 'title' \n                                        placeholder='Title' \n                                        value= {this.state.todos.title}\n                                        onChange= {this.onEntryChange} required />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <input type= \"text\" \n                                        name= 'category' \n                                        placeholder='Category'\n                                        value= {this.state.todos.category}\n                                        onChange= {this.onEntryChange} required />\n                                    </td>\n                                </tr>\n                            </tbody>     \n                        </table>\n                        <button type=\"submit\">Add Task</button> \n                    \n                    </form>\n                </div>\n            )\n        }\n\n\n    render(){\n        return(\n            <div>\n                <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"rel=\"stylesheet\"></link>\n\n                    <button  onClick={() => this.setState({showForm: true})}>\n                                <i className=\"material-icons\">note_add</i>\n                    </button>\n                        {this.state.showForm && this.renderForm()}      \n\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport firebase from 'firebase';\nimport AddTask from './AddTask';\n\nconst firestore= firebase.firestore();\n\nexport default class Todo extends React.Component{\n    state ={\n            todos:[]\n        }\n\n\n\n    componentDidMount() {\n        const uid = firebase.auth().currentUser.uid;\n        firestore.collection('users')\n         .doc(uid)\n        .collection('todos')\n        .orderBy('title','asc')\n        .onSnapshot(snapshot => {\n            this.setState({todos: snapshot.docs});\n        })\n    }\n\n    onEditClick= (todo) => (e) => {\n\n        const { title } = todo.data();\n        const {category}= todo.data();\n        const updatedTitle= prompt('Edit Title', title);\n        const updatedCategory= prompt('Edit Category', category);\n        const uid = firebase.auth().currentUser.uid;\n\n        if (updatedTitle !== null){\n            firestore.collection('users')\n                .doc(uid)\n                .collection('todos')\n                .doc(todo.id)\n                .update({title: updatedTitle});\n            if(updatedCategory !== null){\n                firestore.collection('users')\n                    .doc(uid)\n                    .collection('todos')\n                    .doc(todo.id)\n                    .update({category: updatedCategory});\n                }\n\n        }\n    }\n\n    onDeleteClick=(todo) => (e) => {\n        const uid = firebase.auth().currentUser.uid;\n        const shouldDelete = window.confirm('Are you sure?')\n        if (shouldDelete){\n            firestore.collection('users')\n                .doc(uid)\n                .collection('todos')\n                .doc(todo.id)\n                .delete();\n\n        }\n    }\n\n\n\n         \n\n    render(){\n            const todoItems= this.state.todos\n                .map((todo,key) => <div className= 'task' key= {todo.id}>\n                    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"rel=\"stylesheet\"></link>\n                    <span> \n                            Title: {todo.data().title} ⭕️<br/>\n                            Category: {todo.data().category}\n                    </span> <br/>\n                    <button onClick= {this.onEditClick(todo)}><i  className=\"material-icons\" >edit</i></button> <span />\n                    <button onClick= {this.onDeleteClick(todo)}><i className=\"material-icons\">delete</i></button>\n                    </div>)\n        return(\n            <div className= \"each-task\">{todoItems}\n                <AddTask />\n            </div>\n            \n           \n        )\n\n    }\n\n\n}","import React from 'react';\nimport firebase from 'firebase';\n\n\nconst firestore= firebase.firestore();\n\nexport default class WorkInProgress extends React.Component{\n    state ={\n            wips:[]\n        }\n\n        \n    componentDidMount() {\n        const uid = firebase.auth().currentUser.uid;\n        firestore\n        .collection('users')\n        .doc(uid)\n        .collection('workInProgress')\n        .onSnapshot(snapshot => {\n            this.setState({wips: snapshot.docs});\n            \n        })\n    }\n\n    onEditClick= (wip) => (e) => {\n        const { title } = wip.data();\n        const {category}= wip.data();\n        const updatedTitle= prompt('Edit Title', title);\n        const updatedCategory= prompt('Edit Category', category);\n        const uid = firebase.auth().currentUser.uid;\n        if (updatedTitle !== null){\n            firestore.collection('users')\n                .doc(uid)\n                .collection('workInProgress')\n                .doc(wip.id)\n                .update({title: updatedTitle});\n            if(updatedCategory !== null){\n                firestore.collection('users')\n                    .doc(uid)\n                    .collection('workInProgress')\n                    .doc(wip.id)\n                    .update({category: updatedCategory});\n                }\n\n        }\n    }\n\n    onDeleteClick=(wip) => (e) => {\n        const shouldDelete = window.confirm('Are you sure?')\n        const uid = firebase.auth().currentUser.uid;\n        if (shouldDelete){\n            firestore.collection('users')\n                .doc(uid)\n                .collection('workInProgress')\n                .doc(wip.id)\n                .delete();\n\n        }\n    }\n\n    render(){\n            const wipItems= this.state.wips\n                .map((wip,key) => <div className= 'task' key= {wip.id}> \n                <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"rel=\"stylesheet\"></link>\n                <span>\n                    Title: {wip.data().title} 🔆️<br/>\n                    Category: {wip.data().category}\n                    <br/>\n                    <button onClick= {this.onEditClick(wip)}><i  style= {{color: 'orange'}} className=\"material-icons\" >edit\n                    </i></button> <span />\n                    <button onClick= {this.onDeleteClick(wip)}><i style= {{color: 'orange'}}className=\"material-icons\">delete\n                    </i></button>\n                </span>\n                </div>)\n        return(\n            <div>{wipItems}</div>\n           \n        )\n\n    }\n\n\n}","import React from 'react';\nimport firebase from 'firebase';\n\n\nconst firestore= firebase.firestore();\n\nexport default class Complete extends React.Component{\n    state ={\n            completedTasks:[]\n        }\n\n\n    componentDidMount() {\n        const uid = firebase.auth().currentUser.uid;\n        firestore\n        .collection('users')\n        .doc(uid)\n        .collection('completed')\n        .onSnapshot(snapshot => {\n            this.setState({completedTasks: snapshot.docs});\n        })\n    }\n\n    onEditClick= (complete) => (e) => {\n        const uid = firebase.auth().currentUser.uid;\n        const { title } = complete.data();\n        const {category}= complete.data();\n        const updatedTitle= prompt('Edit Title', title);\n        const updatedCategory= prompt('Edit Category', category);\n        if (updatedTitle !== null){\n                firestore.collection('users')\n                    .doc(uid)\n                    .collection('completed')\n                    .doc(complete.id)\n                    .update({title: updatedTitle});\n            if(updatedCategory !== null){\n                firestore.collection('users')\n                    .doc(uid)\n                    .collection('completed')\n                    .doc(complete.id)\n                    .update({category: updatedCategory});\n                }\n\n        }\n    }\n\n    onDeleteClick=(complete) => (e) => {\n        const uid = firebase.auth().currentUser.uid;\n        const shouldDelete = window.confirm('Are you sure?')\n        if (shouldDelete){\n            firestore.collection('users')\n                .doc(uid)\n                .collection('completed')\n                .doc(complete.id)\n                .delete();\n\n        }\n    }\n\n    render(){\n            const completeItems= this.state.completedTasks\n                .map((complete,key) => <div className= 'task' key= {complete.id}>\n                <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"rel=\"stylesheet\"></link>\n                <span>\n                    Title: {complete.data().title} ✅<br/>\n                    Category: {complete.data().category}\n                    <br/>\n                    <button onClick= {this.onEditClick(complete)}><i  style= {{color: 'rgb(5, 177, 5)'}} className=\"material-icons\" >edit\n                    </i></button> <span />\n                    <button onClick= {this.onDeleteClick(complete)}><i style= {{color: 'rgb(5, 177, 5)'}}className=\"material-icons\">delete\n                    </i></button>\n                </span>\n                        \n                         </div>)\n            return(\n                    <div>{completeItems}</div>\n                        \n        )\n\n    }\n\n\n}","import React from 'react';\nimport{DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\nimport firebase from 'firebase';\nimport Todo from './Todo';\nimport WorkInProgress from './WorkInProgress';\nimport Complete from './Complete';\n\n\n\nexport default class Board extends React.Component{\n    state= {\n        isSignedIn: false\n    }\n\n    componentDidMount() {\n        this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n            user => {this.setState({isSignedIn: !!user});}\n        );\n      }\n\n      componentWillMount(){\n        if(this.unregisterAuthObserver){\n            this.unregisterAuthObserver();\n        }\n      }\n    signOut= () =>{\n        firebase.auth().signOut();\n        this.props.history.push('/');\n    \n    }\n\n    render(){\n        \n        const currentUser = firebase.auth().currentUser;\n        \n        if (!currentUser) {\n            return (\n              <div>\n                <h2>\"My Board\"</h2>\n                <h4 style = {{textAlign: 'center', color: 'red'}}>Please Sign-in !! </h4>\n               \n              </div>\n            );\n          }\n        return(\n            \n            <div>\n                <h2>\"My Board\"</h2>\n                {<h4>Welcome {currentUser.displayName}! You are now signed-in!</h4> }\n                {<button onClick= {this.signOut}>Sign Out</button>}\n                <hr />\n                {/* {!currentUser && <p>Signing In....</p>} */}\n              \n\n                <div className = \"board\">\n                    \n                        <div className= \"each-list\">\n                           <div><h2>\n                                To - Do <hr style={{border: \"2px solid red\", width: \"50%\"}}/>\n                            </h2></div>\n                                <Todo /> \n                                \n                        </div>\n                                \n                        <div className= \"each-list\">\n                            <h2>\n                                In-Progress <hr style={{border: \"2px solid orange\", width: \"50%\"}}/>\n                            </h2>\n                                 <WorkInProgress /> \n                        </div> \n\n                        <div className= \"each-list\">\n                            <h2>\n                                Complete  <hr style={{border: \"2px solid rgb(5, 177, 5)\", width: \"50%\"}}/>   \n                            </h2>\n                                 <Complete /> \n                        </div>\n                    \n                </div>\n\n            </div>\n\n        )\n    }\n\n}","import React from 'react';\nimport {Link, withRouter} from 'react-router-dom';\n\nclass Nav extends React.Component {\n    render() {\n        return (\n            <div >\n                    <Link to=\"/\"><em>Home  </em></Link>\n                    <Link to=\"/board\"><em>Board</em></Link>\n                \n            </div>\n        )\n    }\n}\n\nexport default withRouter(Nav);","\nimport React from 'react';\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\n\nimport Home from './Components/Home';\nimport Board from './Components/Board';\nimport Nav from './Components/Nav';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className= \"App\">\n        <Router>\n          <Nav />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/board\" component={Board} />\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './setupFirebase';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}