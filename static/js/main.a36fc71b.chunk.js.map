{"version":3,"sources":["setupFirebase.js","Components/Home.js","Components/AddTask.js","Components/Tasks.js","Components/Main-board.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","Home","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","GoogleAuthProvider","this","firebaseAuth","React","Component","firestore","AddTask","state","showForm","tasks","taskName","category","onEntryChange","e","console","log","value","target","setState","name","preventDefault","uid","currentUser","collection","doc","add","type","symbol","then","onSubmit","placeholder","onChange","required","href","rel","onClick","className","renderForm","Tasks","onEditClick","task","data","updatedTaskName","prompt","updatedCategory","id","update","onDeleteClick","window","confirm","delete","onDragStart","event","taskFireStoreId","dataTransfer","setData","onDragOver","onDrop","cat","getData","onSnapshot","snapshot","docs","todo","inProgress","Complete","map","key","push","draggable","style","border","width","Board","isSignedIn","signOut","props","history","unregisterAuthObserver","onAuthStateChanged","user","displayName","textAlign","color","Nav","to","withRouter","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a36fc71b.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport 'firebase/firestore';\n\nfirebase.initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID\n});\n","import React from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\n\n\nexport default class Home extends React.Component {\n\n    uiConfig = {\n        signInFlow:'popup',\n        signInSuccessUrl:'#/board',\n        signInOptions:[\n            firebase.auth.EmailAuthProvider.PROVIDER_ID,\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        ],\n    //     callbacks:{\n    //         signInSuccessWithAuthResult:()=>{\n    //             this.props.history.push('/board')\n    //         }\n    //     }\n    \n    }\n    \n\n\n    render() {\n        return (\n            <div>\n                <h1>Home</h1>\n                <h2>Welcome to the Sprint-Board. Please sign-in to continue.</h2>\n                <p>sign in:</p>\n                <StyledFirebaseAuth\n                uiConfig={this.uiConfig}\n                firebaseAuth= {firebase.auth()}/>\n            </div>\n        )\n    }\n}\n\n\n\n","import React from 'react';\nimport firebase from 'firebase';\n\nconst firestore= firebase.firestore();\n\nexport default class AddTask extends React.Component{\n       state={\n            showForm: false,\n            tasks: {\n                taskName :'',\n                category: ''\n            }\n        }\n\n        onEntryChange= (e) => {\n            console.log(e)\n            \n            const value = e.target.value;\n            \n            this.setState({\n                tasks:{\n                    ...this.state.tasks,\n                [e.target.name] : value }\n            })\n    \n        }\n\n        AddTask= (e)=> {\n\n            e.preventDefault();\n            const uid = firebase.auth().currentUser.uid;\n\n            firestore.collection('users')\n            .doc(uid)\n            .collection('tasks').add({\n                taskName: this.state.tasks.taskName,\n                category: this.state.tasks.category,\n                type: \"todo\",\n                symbol: \"⭕️\"\n\n            }).then(()=>{\n                this.setState({\n                    tasks: {\n                        taskName: '',\n                        category: ''\n                    },\n                    showForm: false\n                })\n            })\n\n        }\n    \n\n        renderForm () {\n            return(\n                <div>\n                    <form onSubmit={this.AddTask}>\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <input type= \"text\" \n                                        name = 'taskName' \n                                        placeholder='Title' \n                                        value= {this.state.tasks.taskName}\n                                        onChange= {this.onEntryChange} required />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <input type= \"text\" \n                                        name= 'category' \n                                        placeholder='Category'\n                                        value= {this.state.tasks.category}\n                                        onChange= {this.onEntryChange} required />\n                                    </td>\n                                </tr>\n                            </tbody>     \n                        </table>\n                        <button type=\"submit\">Add Task</button> \n                    \n                    </form>\n                </div>\n            )\n        }\n\n\n    render(){\n        return(\n            <div>\n                <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"rel=\"stylesheet\"></link>\n\n                    <button  onClick={() => this.setState({showForm: true})}>\n                                <i className=\"material-icons\">note_add</i>\n                    </button>\n                        {this.state.showForm && this.renderForm()}      \n\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport firebase from 'firebase';\nimport AddTask from './AddTask';\n\nconst firestore= firebase.firestore();\n\nexport default class Tasks extends React.Component{\n    state ={\n            tasks:[]\n        }\n\n        componentDidMount() {\n            const uid = firebase.auth().currentUser.uid;\n\n            firestore.collection('users')\n             .doc(uid)\n             .collection('tasks')\n            \n            .onSnapshot(snapshot => {\n                this.setState({tasks: snapshot.docs});\n                \n            },console.log(this.state.tasks))\n        }\n\n        onEditClick= (task) => (e) => {\n\n            const { taskName } = task.data();\n            const {category}= task.data();\n            const updatedTaskName = prompt('Edit TaskName', taskName);\n            const updatedCategory= prompt('Edit Category', category);\n            const uid = firebase.auth().currentUser.uid;\n    \n            if (updatedTaskName !== null){\n                firestore.collection('users')\n                    .doc(uid)\n                    .collection('tasks')\n                    .doc(task.id)\n                    .update({taskName: updatedTaskName});\n                if(updatedCategory !== null){\n                    firestore.collection('users')\n                        .doc(uid)\n                        .collection('tasks')\n                        .doc(task.id)\n                        .update({category: updatedCategory});\n                    }\n    \n            }\n        }\n\n\n        onDeleteClick=(task) => (e) => {\n            const uid = firebase.auth().currentUser.uid;\n            const shouldDelete = window.confirm('Are you sure?')\n            if (shouldDelete){\n                firestore.collection('users')\n                    .doc(uid)\n                    .collection('tasks')\n                    .doc(task.id)\n                    .delete();\n    \n            }\n        }\n\n        onDragStart = (event, task) => {\n\n            console.log(task.data());\n            console.log(\"********\")\n            const taskName = task.data().taskName;\n            const taskFireStoreId = task.id;\n            console.log(taskFireStoreId);\n            console.log(\"FireStore ID above\");\n            \n            console.log('dragstart on div: ', taskName);\n            event.dataTransfer.setData(\"taskName\", taskName);\n            event.dataTransfer.setData(\"taskFireStoreId\", taskFireStoreId);\n            \n        }\n        onDragOver = (event) => {\n            console.log(\"inside ondragover\")\n\n            event.preventDefault();\n            \n        }\n    \n        onDrop = (event, cat, symbol) => {\n            \n            console.log(\"inside ondrop\")\n            console.log(cat)\n            let taskName = event.dataTransfer.getData(\"taskName\");\n            let taskFireStoreId = event.dataTransfer.getData(\"taskFireStoreId\")\n            \n            console.log(taskName);\n\n            const uid = firebase.auth().currentUser.uid;\n            firestore.collection('users')\n             .doc(uid)\n             .collection('tasks')\n             .doc(taskFireStoreId)\n             .update({type : cat, symbol: symbol});             \n        }\n\n        render(){\n           \n            \n            var tasks = {\n                todo:[],\n                inProgress: [],\n                Complete: []\n              }\n              console.log(this.state.tasks)\n\n            this.state.tasks.map((task,key) => {\n                \n                    tasks[task.data().type].push(\n                        <div  key={task.data().taskName} onDragStart = {(event) => this.onDragStart(event, task)}\n                            draggable className = \"draggable\"> \n                            <span> \n                                {task.data().symbol} Title: {task.data().taskName} <br/>\n                                Category: {task.data().category}<br/>\n                                <button onClick= {this.onEditClick(task)}><i  className=\"material-icons\" >edit</i></button> <span />\n                                <button onClick= {this.onDeleteClick(task)}><i className=\"material-icons\">delete</i></button>\n                            </span> <br/>\n                        </div>\n                );\n              });\n\n\n        \n              \n                 \n             \n\n\n        return(\n            <div className=\"board\">\n                    <div className= \"each-list\" onDragOver={(event)=>this.onDragOver(event)}\n                        onDrop={(event)=>{this.onDrop(event, \"todo\", '⭕️')}}>\n                            <h2>\n                                To - Do <hr style={{border: \"2px solid red\", width: \"50%\"}}/> \n                            </h2>\n                            <span>\n                                {tasks.todo}\n                                <AddTask />\n                            </span>\n\n                    </div>\n\n                    <div className= \"each-list\" onDragOver={(event)=>this.onDragOver(event)}\n                        onDrop={(event)=>{this.onDrop(event, \"inProgress\", '🔆️')}} >\n                            <h2>\n                                In-Progress <hr style={{border: \"2px solid orange\", width: \"50%\"}}/>\n                            </h2>\n                            <span> \n                                {tasks.inProgress}\n                            </span>      \n                    </div> \n\n                    <div className= \"each-list\" onDragOver={(event)=>this.onDragOver(event)}\n                        onDrop={(event)=>this.onDrop(event, \"Complete\", '✅')}>\n                            <h2>\n                                    Complete  <hr style={{border: \"2px solid rgb(5, 177, 5)\", width: \"50%\"}}/>   \n                            </h2>\n                                <span> {tasks.Complete} </span>    \n                    </div>\n           \t        \n\t      </div>\n\t    );\n        \n\n}\n}","import React from 'react';\nimport firebase from 'firebase';\nimport Tasks from './Tasks';\n\n\n\n\nexport default class Board extends React.Component{\n    state= {\n        isSignedIn: false\n    }\n\n    componentDidMount() {\n        this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n            user => {this.setState({isSignedIn: !!user});}\n        );\n      }\n\n      componentWillMount(){\n        if(this.unregisterAuthObserver){\n            this.unregisterAuthObserver();\n        }\n      }\n    signOut= () =>{\n        firebase.auth().signOut();\n        this.props.history.push('/');\n    \n    }\n\n    render(){\n        \n        const currentUser = firebase.auth().currentUser;\n        \n        if (!currentUser) {\n            return (\n              <div>\n                <h4 style = {{textAlign: 'center', color: 'red'}}>Please Sign-in !! </h4>\n               \n              </div>\n            );\n          }\n\n          \n        return(\n            \n            <div >\n                <h4>Welcome {currentUser.displayName}! You are now signed-in!</h4> \n                <button onClick= {this.signOut}>Sign Out</button>\n                <span />\n                \n                <Tasks />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {Link, withRouter} from 'react-router-dom';\n\nclass Nav extends React.Component {\n    render() {\n        return (\n            <div >\n                    <Link to=\"/\"><em>Home  </em></Link>\n                    <Link to=\"/board\"><em>Board</em></Link>\n                \n            </div>\n        )\n    }\n}\n\nexport default withRouter(Nav);","\nimport React from 'react';\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\n\nimport Home from './Components/Home';\nimport Board from './Components/Main-board';\nimport Nav from './Components/Nav';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className= \"App\">\n        <Router>\n          <Nav />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/board\" component={Board} />\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './setupFirebase';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}